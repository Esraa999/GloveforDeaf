
GccApplicationpPROJCT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000a4c  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000b2  008000b2  00000b32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b22  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b28  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f06  00000000  00000000  00003352  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00004258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb1  00000000  00000000  00004ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005a72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 40 02 	call	0x480	; 0x480 <main>
  8a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "../NeededDIO/config.h"
#include "ADC.h"

void ADC_init( int Reference, int prescaler) {
   
    ADMUX |= (Reference << REFS0);
  92:	27 b1       	in	r18, 0x07	; 7
  94:	00 24       	eor	r0, r0
  96:	96 95       	lsr	r25
  98:	87 95       	ror	r24
  9a:	07 94       	ror	r0
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	07 94       	ror	r0
  a2:	98 2f       	mov	r25, r24
  a4:	80 2d       	mov	r24, r0
  a6:	82 2b       	or	r24, r18
  a8:	87 b9       	out	0x07, r24	; 7
    ADCSRA &= 0xF8;
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	88 7f       	andi	r24, 0xF8	; 248
  ae:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= prescaler;
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	68 2b       	or	r22, r24
  b4:	66 b9       	out	0x06, r22	; 6
    ADCSRA |= (1 << ADEN);
  b6:	37 9a       	sbi	0x06, 7	; 6
  b8:	08 95       	ret

000000ba <ADC_channel>:
}
void ADC_channel(int _channel){
   ADMUX = 0x00;
  ba:	17 b8       	out	0x07, r1	; 7
   ADMUX |= _channel;  
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 ef       	ldi	r24, 0xF9	; 249
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <ADC_channel+0xe>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <ADC_channel+0x18>
  d2:	00 00       	nop
   _delay_ms(20);
   ADCSRA |= (1<<ADSC);//START CONVERSION
  d4:	36 9a       	sbi	0x06, 6	; 6
  d6:	08 95       	ret

000000d8 <ADC_read>:
}



int ADC_read() {
    while(!(ADCSRA & (1<<ADIF)));
  d8:	34 9b       	sbis	0x06, 4	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <ADC_read>
    int data = ADCL;
  dc:	84 b1       	in	r24, 0x04	; 4
    data |= (ADCH<<8);
  de:	25 b1       	in	r18, 0x05	; 5
    return data;
  e0:	90 e0       	ldi	r25, 0x00	; 0
}
  e2:	92 2b       	or	r25, r18
  e4:	08 95       	ret

000000e6 <LCD_Alter_Enable_Bit>:
void LCD_Numbers(int num) {
    char buffer[11];
    itoa(num, buffer, 10);
    LCD_String(buffer);

}
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 05 03 	call	0x60a	; 0x60a <Set_Pin_Data>
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Alter_Enable_Bit+0x14>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Alter_Enable_Bit+0x1a>
 100:	00 00       	nop
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 05 03 	call	0x60a	; 0x60a <Set_Pin_Data>
 112:	08 95       	ret

00000114 <LCD_Send_Data>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 05 03 	call	0x60a	; 0x60a <Set_Pin_Data>
 128:	6c 2f       	mov	r22, r28
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 78 02 	call	0x4f0	; 0x4f0 <setPortData>
 134:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Alter_Enable_Bit>
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <LCD_Send_Command>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 05 03 	call	0x60a	; 0x60a <Set_Pin_Data>
 150:	6c 2f       	mov	r22, r28
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 78 02 	call	0x4f0	; 0x4f0 <setPortData>
 15c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Alter_Enable_Bit>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <LCD_Init>:
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 4f 02 	call	0x49e	; 0x49e <Set_Port_Direction>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 8d 02 	call	0x51a	; 0x51a <Set_Pin_Direction>
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 8d 02 	call	0x51a	; 0x51a <Set_Pin_Direction>
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 8d 02 	call	0x51a	; 0x51a <Set_Pin_Direction>
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 05 03 	call	0x60a	; 0x60a <Set_Pin_Data>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_Init+0x50>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Init+0x56>
 1ba:	00 00       	nop
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 1c2:	8f e9       	ldi	r24, 0x9F	; 159
 1c4:	9f e0       	ldi	r25, 0x0F	; 15
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Init+0x62>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_Init+0x68>
 1cc:	00 00       	nop
 1ce:	88 e3       	ldi	r24, 0x38	; 56
 1d0:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	20 e7       	ldi	r18, 0x70	; 112
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <LCD_Init+0x76>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_Init+0x80>
 1e4:	00 00       	nop
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 1ec:	9f ef       	ldi	r25, 0xFF	; 255
 1ee:	20 e7       	ldi	r18, 0x70	; 112
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	91 50       	subi	r25, 0x01	; 1
 1f4:	20 40       	sbci	r18, 0x00	; 0
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <LCD_Init+0x8e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_Init+0x98>
 1fc:	00 00       	nop
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	20 e7       	ldi	r18, 0x70	; 112
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	91 50       	subi	r25, 0x01	; 1
 20c:	20 40       	sbci	r18, 0x00	; 0
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <LCD_Init+0xa6>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Init+0xb0>
 214:	00 00       	nop
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	20 e7       	ldi	r18, 0x70	; 112
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	91 50       	subi	r25, 0x01	; 1
 224:	20 40       	sbci	r18, 0x00	; 0
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <LCD_Init+0xbe>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_Init+0xc8>
 22c:	00 00       	nop
 22e:	08 95       	ret

00000230 <LCD_String>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	31 f0       	breq	.+12     	; 0x248 <LCD_String+0x18>
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Send_Data>
 242:	89 91       	ld	r24, Y+
 244:	81 11       	cpse	r24, r1
 246:	fb cf       	rjmp	.-10     	; 0x23e <LCD_String+0xe>
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_XY>:

void LCD_XY(int ROW, int column) {
    switch (ROW) {
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	19 f0       	breq	.+6      	; 0x258 <LCD_XY+0xa>
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	31 f0       	breq	.+12     	; 0x262 <LCD_XY+0x14>
 256:	08 95       	ret
        case _ROW0:
            LCD_Send_Command(0x80 | column);
 258:	86 2f       	mov	r24, r22
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
            break;
 260:	08 95       	ret
        case _ROW1:
            LCD_Send_Command(0xC0 | column);
 262:	86 2f       	mov	r24, r22
 264:	80 6c       	ori	r24, 0xC0	; 192
 266:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 26a:	08 95       	ret

0000026c <ADC_Channel_Increment>:
#include "../NeededDIO/config.h"
int Finger[5];

void ADC_Channel_Increment(){
    int counter = 0;
        ADC_channel(counter++);   
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 5d 00 	call	0xba	; 0xba <ADC_channel>
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	83 ec       	ldi	r24, 0xC3	; 195
 278:	99 e0       	ldi	r25, 0x09	; 9
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <ADC_Channel_Increment+0xe>
 282:	00 c0       	rjmp	.+0      	; 0x284 <ADC_Channel_Increment+0x18>
 284:	00 00       	nop
 286:	08 95       	ret

00000288 <ADC_Save_Read>:
            counter = 0;
            LCD_Send_Command(0x01); //Clear LCD
            _delay_ms(1);
        }
}
void ADC_Save_Read(){
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	02 eb       	ldi	r16, 0xB2	; 178
 292:	10 e0       	ldi	r17, 0x00	; 0
    
        for (int i = 0; i < 5; i++) {
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
            ADC_channel(i);
 298:	ce 01       	movw	r24, r28
 29a:	0e 94 5d 00 	call	0xba	; 0xba <ADC_channel>
            Finger[i] = ADC_read();
 29e:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADC_read>
 2a2:	f8 01       	movw	r30, r16
 2a4:	81 93       	st	Z+, r24
 2a6:	91 93       	st	Z+, r25
 2a8:	8f 01       	movw	r16, r30
            LCD_Send_Command(0x01); //Clear LCD
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <ADC_Save_Read+0x2c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <ADC_Save_Read+0x32>
 2ba:	00 00       	nop
            _delay_ms(1);
        }
}
void ADC_Save_Read(){
    
        for (int i = 0; i < 5; i++) {
 2bc:	21 96       	adiw	r28, 0x01	; 1
 2be:	c5 30       	cpi	r28, 0x05	; 5
 2c0:	d1 05       	cpc	r29, r1
 2c2:	51 f7       	brne	.-44     	; 0x298 <ADC_Save_Read+0x10>
            ADC_channel(i);
            Finger[i] = ADC_read();
            LCD_Send_Command(0x01); //Clear LCD
            _delay_ms(1);
        }
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <SensorOnFingers>:
	//FINGER[0] THUMBS
	//FINGER[1] INDEX
	//FINGER[2] MIDDLE
	//FINGER[3] RING
	//FINGER[4] PINKY
     if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == FORTY_FIVE_DEGREE_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND &&Finger[4] == NINETY_DEGREE_COMPLETE_BEND)
 2ce:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
 2d2:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	89 f5       	brne	.+98     	; 0x33c <SensorOnFingers+0x6e>
 2da:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x2>
 2de:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x3>
 2e2:	8d 3c       	cpi	r24, 0xCD	; 205
 2e4:	91 40       	sbci	r25, 0x01	; 1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <SensorOnFingers+0x1c>
 2e8:	b1 c0       	rjmp	.+354    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 2ea:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 2ee:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 2f2:	89 2b       	or	r24, r25
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <SensorOnFingers+0x2a>
 2f6:	a2 c0       	rjmp	.+324    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 2f8:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 2fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 300:	89 2b       	or	r24, r25
 302:	09 f0       	breq	.+2      	; 0x306 <SensorOnFingers+0x38>
 304:	9b c0       	rjmp	.+310    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 306:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 30a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 30e:	89 2b       	or	r24, r25
 310:	09 f0       	breq	.+2      	; 0x314 <SensorOnFingers+0x46>
 312:	94 c0       	rjmp	.+296    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	  {
            You();
 314:	0e 94 ed 03 	call	0x7da	; 0x7da <You>
 318:	08 95       	ret
        } 
		else if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == FORTY_FIVE_DEGREE_BEND && Finger[2] == FORTY_FIVE_DEGREE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == NINETY_DEGREE_COMPLETE_BEND) {
 31a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 31e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 322:	89 2b       	or	r24, r25
 324:	09 f0       	breq	.+2      	; 0x328 <SensorOnFingers+0x5a>
 326:	ab c0       	rjmp	.+342    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 328:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 32c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 330:	89 2b       	or	r24, r25
 332:	09 f0       	breq	.+2      	; 0x336 <SensorOnFingers+0x68>
 334:	a4 c0       	rjmp	.+328    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            I_am_Watching();
 336:	0e 94 b5 03 	call	0x76a	; 0x76a <I_am_Watching>
 33a:	08 95       	ret
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] ==AT_REST_NO_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
 33c:	8f 3f       	cpi	r24, 0xFF	; 255
 33e:	93 40       	sbci	r25, 0x03	; 3
 340:	09 f0       	breq	.+2      	; 0x344 <SensorOnFingers+0x76>
 342:	9d c0       	rjmp	.+314    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 344:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x2>
 348:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x3>
 34c:	8f 3f       	cpi	r24, 0xFF	; 255
 34e:	93 40       	sbci	r25, 0x03	; 3
 350:	09 f0       	breq	.+2      	; 0x354 <SensorOnFingers+0x86>
 352:	84 c0       	rjmp	.+264    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 354:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 358:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 35c:	8f 3f       	cpi	r24, 0xFF	; 255
 35e:	93 40       	sbci	r25, 0x03	; 3
 360:	09 f0       	breq	.+2      	; 0x364 <SensorOnFingers+0x96>
 362:	85 c0       	rjmp	.+266    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 364:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 368:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 36c:	89 2b       	or	r24, r25
 36e:	09 f0       	breq	.+2      	; 0x372 <SensorOnFingers+0xa4>
 370:	7e c0       	rjmp	.+252    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 372:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 376:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 37a:	8f 3f       	cpi	r24, 0xFF	; 255
 37c:	93 40       	sbci	r25, 0x03	; 3
 37e:	09 f0       	breq	.+2      	; 0x382 <SensorOnFingers+0xb4>
 380:	76 c0       	rjmp	.+236    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
            Really_I_love_you();
 382:	0e 94 1e 04 	call	0x83c	; 0x83c <Really_I_love_you>
 386:	08 95       	ret
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
 388:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 38c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 390:	89 2b       	or	r24, r25
 392:	19 f5       	brne	.+70     	; 0x3da <SensorOnFingers+0x10c>
 394:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 398:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 39c:	8f 3f       	cpi	r24, 0xFF	; 255
 39e:	93 40       	sbci	r25, 0x03	; 3
 3a0:	e1 f4       	brne	.+56     	; 0x3da <SensorOnFingers+0x10c>
            I_love_you();
 3a2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <I_love_you>
 3a6:	08 95       	ret
        } else if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
 3a8:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 3ac:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 3b0:	89 2b       	or	r24, r25
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <SensorOnFingers+0xe8>
 3b4:	64 c0       	rjmp	.+200    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3b6:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 3ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 3be:	89 2b       	or	r24, r25
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <SensorOnFingers+0xf6>
 3c2:	5d c0       	rjmp	.+186    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3c4:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 3c8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 3cc:	8f 3f       	cpi	r24, 0xFF	; 255
 3ce:	93 40       	sbci	r25, 0x03	; 3
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <SensorOnFingers+0x106>
 3d2:	55 c0       	rjmp	.+170    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            This_is_Awesome();
 3d4:	0e 94 a1 04 	call	0x942	; 0x942 <This_is_Awesome>
 3d8:	08 95       	ret
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == AT_REST_NO_BEND && Finger[3] == AT_REST_NO_BEND && Finger[4] == AT_REST_NO_BEND) {
 3da:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 3de:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 3e2:	8f 3f       	cpi	r24, 0xFF	; 255
 3e4:	93 40       	sbci	r25, 0x03	; 3
 3e6:	09 f0       	breq	.+2      	; 0x3ea <SensorOnFingers+0x11c>
 3e8:	4a c0       	rjmp	.+148    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3ea:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 3ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 3f2:	8f 3f       	cpi	r24, 0xFF	; 255
 3f4:	93 40       	sbci	r25, 0x03	; 3
 3f6:	09 f0       	breq	.+2      	; 0x3fa <SensorOnFingers+0x12c>
 3f8:	42 c0       	rjmp	.+132    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3fa:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 3fe:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 402:	8f 3f       	cpi	r24, 0xFF	; 255
 404:	93 40       	sbci	r25, 0x03	; 3
 406:	d9 f5       	brne	.+118    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            I_hope_you_a_happy_life();
 408:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <I_hope_you_a_happy_life>
 40c:	08 95       	ret
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == NINETY_DEGREE_COMPLETE_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == NINETY_DEGREE_COMPLETE_BEND) {
 40e:	89 2b       	or	r24, r25
 410:	b1 f5       	brne	.+108    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 412:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 416:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 41a:	89 2b       	or	r24, r25
 41c:	81 f5       	brne	.+96     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 41e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x6>
 422:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x7>
 426:	89 2b       	or	r24, r25
 428:	51 f5       	brne	.+84     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 42a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x8>
 42e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x9>
 432:	89 2b       	or	r24, r25
 434:	21 f5       	brne	.+72     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            Good_Job();
 436:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Good_Job>
        }
 43a:	08 95       	ret
	//FINGER[4] PINKY
     if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == FORTY_FIVE_DEGREE_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND &&Finger[4] == NINETY_DEGREE_COMPLETE_BEND)
	  {
            You();
        } 
		else if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == FORTY_FIVE_DEGREE_BEND && Finger[2] == FORTY_FIVE_DEGREE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == NINETY_DEGREE_COMPLETE_BEND) {
 43c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 440:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 444:	8d 3c       	cpi	r24, 0xCD	; 205
 446:	91 40       	sbci	r25, 0x01	; 1
 448:	d1 f4       	brne	.+52     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 44a:	67 cf       	rjmp	.-306    	; 0x31a <SensorOnFingers+0x4c>
            I_am_Watching();
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] ==AT_REST_NO_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
            Really_I_love_you();
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
            I_love_you();
        } else if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
 44c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x2>
 450:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x3>
 454:	8f 3f       	cpi	r24, 0xFF	; 255
 456:	93 40       	sbci	r25, 0x03	; 3
 458:	91 f4       	brne	.+36     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 45a:	a6 cf       	rjmp	.-180    	; 0x3a8 <SensorOnFingers+0xda>
            This_is_Awesome();
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == AT_REST_NO_BEND && Finger[3] == AT_REST_NO_BEND && Finger[4] == AT_REST_NO_BEND) {
 45c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x2>
 460:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x3>
 464:	8f 3f       	cpi	r24, 0xFF	; 255
 466:	23 e0       	ldi	r18, 0x03	; 3
 468:	92 07       	cpc	r25, r18
 46a:	89 f6       	brne	.-94     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 46c:	b6 cf       	rjmp	.-148    	; 0x3da <SensorOnFingers+0x10c>
        } 
		else if (Finger[0] == NINETY_DEGREE_COMPLETE_BEND && Finger[1] == FORTY_FIVE_DEGREE_BEND && Finger[2] == FORTY_FIVE_DEGREE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == NINETY_DEGREE_COMPLETE_BEND) {
            I_am_Watching();
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] ==AT_REST_NO_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
            Really_I_love_you();
        } else if (Finger[0] == AT_REST_NO_BEND && Finger[1] == AT_REST_NO_BEND && Finger[2] == NINETY_DEGREE_COMPLETE_BEND && Finger[3] == NINETY_DEGREE_COMPLETE_BEND && Finger[4] == AT_REST_NO_BEND) {
 46e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x4>
 472:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x5>
 476:	89 2b       	or	r24, r25
 478:	09 f4       	brne	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	86 cf       	rjmp	.-244    	; 0x388 <SensorOnFingers+0xba>
 47c:	ae cf       	rjmp	.-164    	; 0x3da <SensorOnFingers+0x10c>
 47e:	08 95       	ret

00000480 <main>:

#include <avr/io.h>
#include "NeededDIO/config.h"
#include "Logic/Logic.h"
int main(void) {
    ADC_init(_VCC, _prescaler_128);
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
    LCD_Init();
 48c:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_Init>
    while (1) {
        ADC_Channel_Increment();
 490:	0e 94 36 01 	call	0x26c	; 0x26c <ADC_Channel_Increment>
        ADC_Save_Read();
 494:	0e 94 44 01 	call	0x288	; 0x288 <ADC_Save_Read>
        SensorOnFingers();
 498:	0e 94 67 01 	call	0x2ce	; 0x2ce <SensorOnFingers>
 49c:	f9 cf       	rjmp	.-14     	; 0x490 <main+0x10>

0000049e <Set_Port_Direction>:
            break;
        case _PC:
            PORTC ^= 0xFF;
            break;
        case _PD:
            PORTD ^= 0xFF;
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	91 05       	cpc	r25, r1
 4a2:	89 f0       	breq	.+34     	; 0x4c6 <Set_Port_Direction+0x28>
 4a4:	1c f4       	brge	.+6      	; 0x4ac <Set_Port_Direction+0xe>
 4a6:	89 2b       	or	r24, r25
 4a8:	39 f0       	breq	.+14     	; 0x4b8 <Set_Port_Direction+0x1a>
 4aa:	08 95       	ret
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	91 05       	cpc	r25, r1
 4b0:	89 f0       	breq	.+34     	; 0x4d4 <Set_Port_Direction+0x36>
 4b2:	03 97       	sbiw	r24, 0x03	; 3
 4b4:	b1 f0       	breq	.+44     	; 0x4e2 <Set_Port_Direction+0x44>
 4b6:	08 95       	ret
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	67 2b       	or	r22, r23
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <Set_Port_Direction+0x22>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	81 95       	neg	r24
 4c2:	8a bb       	out	0x1a, r24	; 26
 4c4:	08 95       	ret
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	67 2b       	or	r22, r23
 4ca:	09 f4       	brne	.+2      	; 0x4ce <Set_Port_Direction+0x30>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	81 95       	neg	r24
 4d0:	87 bb       	out	0x17, r24	; 23
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	67 2b       	or	r22, r23
 4d8:	09 f4       	brne	.+2      	; 0x4dc <Set_Port_Direction+0x3e>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	81 95       	neg	r24
 4de:	84 bb       	out	0x14, r24	; 20
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	67 2b       	or	r22, r23
 4e6:	09 f4       	brne	.+2      	; 0x4ea <Set_Port_Direction+0x4c>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	81 95       	neg	r24
 4ec:	81 bb       	out	0x11, r24	; 17
 4ee:	08 95       	ret

000004f0 <setPortData>:
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	91 05       	cpc	r25, r1
 4f4:	61 f0       	breq	.+24     	; 0x50e <setPortData+0x1e>
 4f6:	1c f4       	brge	.+6      	; 0x4fe <setPortData+0xe>
 4f8:	89 2b       	or	r24, r25
 4fa:	39 f0       	breq	.+14     	; 0x50a <setPortData+0x1a>
 4fc:	08 95       	ret
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	91 05       	cpc	r25, r1
 502:	39 f0       	breq	.+14     	; 0x512 <setPortData+0x22>
 504:	03 97       	sbiw	r24, 0x03	; 3
 506:	39 f0       	breq	.+14     	; 0x516 <setPortData+0x26>
 508:	08 95       	ret
 50a:	6b bb       	out	0x1b, r22	; 27
 50c:	08 95       	ret
 50e:	68 bb       	out	0x18, r22	; 24
 510:	08 95       	ret
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
 516:	62 bb       	out	0x12, r22	; 18
 518:	08 95       	ret

0000051a <Set_Pin_Direction>:
            ;
    }
}

void Set_Pin_Direction(int portNum, int pinNum, int state) {
    if (state) {
 51a:	45 2b       	or	r20, r21
 51c:	c9 f1       	breq	.+114    	; 0x590 <Set_Pin_Direction+0x76>
        switch (portNum) {
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	91 05       	cpc	r25, r1
 522:	a9 f0       	breq	.+42     	; 0x54e <Set_Pin_Direction+0x34>
 524:	1c f4       	brge	.+6      	; 0x52c <Set_Pin_Direction+0x12>
 526:	89 2b       	or	r24, r25
 528:	39 f0       	breq	.+14     	; 0x538 <Set_Pin_Direction+0x1e>
 52a:	08 95       	ret
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	91 05       	cpc	r25, r1
 530:	c9 f0       	breq	.+50     	; 0x564 <Set_Pin_Direction+0x4a>
 532:	03 97       	sbiw	r24, 0x03	; 3
 534:	11 f1       	breq	.+68     	; 0x57a <Set_Pin_Direction+0x60>
 536:	08 95       	ret
            case _PA:
                DDRA |= (1 << pinNum);
 538:	2a b3       	in	r18, 0x1a	; 26
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <Set_Pin_Direction+0x2a>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <Set_Pin_Direction+0x26>
 548:	82 2b       	or	r24, r18
 54a:	8a bb       	out	0x1a, r24	; 26
                break;
 54c:	08 95       	ret
            case _PB:
                DDRB |= (1 << pinNum);
 54e:	27 b3       	in	r18, 0x17	; 23
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <Set_Pin_Direction+0x40>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <Set_Pin_Direction+0x3c>
 55e:	82 2b       	or	r24, r18
 560:	87 bb       	out	0x17, r24	; 23
                break;
 562:	08 95       	ret
            case _PC:
                DDRC |= (1 << pinNum);
 564:	24 b3       	in	r18, 0x14	; 20
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <Set_Pin_Direction+0x56>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <Set_Pin_Direction+0x52>
 574:	82 2b       	or	r24, r18
 576:	84 bb       	out	0x14, r24	; 20
                break;
 578:	08 95       	ret
            case _PD:
                DDRD |= (1 << pinNum);
 57a:	21 b3       	in	r18, 0x11	; 17
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <Set_Pin_Direction+0x6c>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <Set_Pin_Direction+0x68>
 58a:	82 2b       	or	r24, r18
 58c:	81 bb       	out	0x11, r24	; 17
                break;
 58e:	08 95       	ret
        }
    } else {
        switch (portNum) {
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	91 05       	cpc	r25, r1
 594:	b1 f0       	breq	.+44     	; 0x5c2 <Set_Pin_Direction+0xa8>
 596:	1c f4       	brge	.+6      	; 0x59e <Set_Pin_Direction+0x84>
 598:	89 2b       	or	r24, r25
 59a:	39 f0       	breq	.+14     	; 0x5aa <Set_Pin_Direction+0x90>
 59c:	08 95       	ret
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	91 05       	cpc	r25, r1
 5a2:	d9 f0       	breq	.+54     	; 0x5da <Set_Pin_Direction+0xc0>
 5a4:	03 97       	sbiw	r24, 0x03	; 3
 5a6:	29 f1       	breq	.+74     	; 0x5f2 <Set_Pin_Direction+0xd8>
 5a8:	08 95       	ret
            case _PA:
                DDRA &= ~(1 << pinNum);
 5aa:	2a b3       	in	r18, 0x1a	; 26
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <Set_Pin_Direction+0x9c>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <Set_Pin_Direction+0x98>
 5ba:	80 95       	com	r24
 5bc:	82 23       	and	r24, r18
 5be:	8a bb       	out	0x1a, r24	; 26
                break;
 5c0:	08 95       	ret
            case _PB:
                DDRB &= ~(1 << pinNum);
 5c2:	27 b3       	in	r18, 0x17	; 23
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <Set_Pin_Direction+0xb4>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <Set_Pin_Direction+0xb0>
 5d2:	80 95       	com	r24
 5d4:	82 23       	and	r24, r18
 5d6:	87 bb       	out	0x17, r24	; 23
                break;
 5d8:	08 95       	ret
            case _PC:
                DDRC &= ~(1 << pinNum);
 5da:	24 b3       	in	r18, 0x14	; 20
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Set_Pin_Direction+0xcc>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <Set_Pin_Direction+0xc8>
 5ea:	80 95       	com	r24
 5ec:	82 23       	and	r24, r18
 5ee:	84 bb       	out	0x14, r24	; 20
                break;
 5f0:	08 95       	ret
            case _PD:
                DDRD &= ~(1 << pinNum);
 5f2:	21 b3       	in	r18, 0x11	; 17
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <Set_Pin_Direction+0xe4>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <Set_Pin_Direction+0xe0>
 602:	80 95       	com	r24
 604:	82 23       	and	r24, r18
 606:	81 bb       	out	0x11, r24	; 17
 608:	08 95       	ret

0000060a <Set_Pin_Data>:
        }
    }
}

void Set_Pin_Data(int portNum, int pinNum, int data) {
    if (data) {
 60a:	45 2b       	or	r20, r21
 60c:	c9 f1       	breq	.+114    	; 0x680 <Set_Pin_Data+0x76>
        switch (portNum) {
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	91 05       	cpc	r25, r1
 612:	a9 f0       	breq	.+42     	; 0x63e <Set_Pin_Data+0x34>
 614:	1c f4       	brge	.+6      	; 0x61c <Set_Pin_Data+0x12>
 616:	89 2b       	or	r24, r25
 618:	39 f0       	breq	.+14     	; 0x628 <Set_Pin_Data+0x1e>
 61a:	08 95       	ret
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	c9 f0       	breq	.+50     	; 0x654 <Set_Pin_Data+0x4a>
 622:	03 97       	sbiw	r24, 0x03	; 3
 624:	11 f1       	breq	.+68     	; 0x66a <Set_Pin_Data+0x60>
 626:	08 95       	ret
            case _PA:
                PORTA |= (1 << pinNum);
 628:	2b b3       	in	r18, 0x1b	; 27
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <Set_Pin_Data+0x2a>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <Set_Pin_Data+0x26>
 638:	82 2b       	or	r24, r18
 63a:	8b bb       	out	0x1b, r24	; 27
                break;
 63c:	08 95       	ret
            case _PB:
                PORTB |= (1 << pinNum);
 63e:	28 b3       	in	r18, 0x18	; 24
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <Set_Pin_Data+0x40>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <Set_Pin_Data+0x3c>
 64e:	82 2b       	or	r24, r18
 650:	88 bb       	out	0x18, r24	; 24
                break;
 652:	08 95       	ret
            case _PC:
                PORTC |= (1 << pinNum);
 654:	25 b3       	in	r18, 0x15	; 21
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <Set_Pin_Data+0x56>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <Set_Pin_Data+0x52>
 664:	82 2b       	or	r24, r18
 666:	85 bb       	out	0x15, r24	; 21
                break;
 668:	08 95       	ret
            case _PD:
                PORTD |= (1 << pinNum);
 66a:	22 b3       	in	r18, 0x12	; 18
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <Set_Pin_Data+0x6c>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <Set_Pin_Data+0x68>
 67a:	82 2b       	or	r24, r18
 67c:	82 bb       	out	0x12, r24	; 18
                break;
 67e:	08 95       	ret
        }
    } else {
        switch (portNum) {
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 05       	cpc	r25, r1
 684:	b1 f0       	breq	.+44     	; 0x6b2 <Set_Pin_Data+0xa8>
 686:	1c f4       	brge	.+6      	; 0x68e <Set_Pin_Data+0x84>
 688:	89 2b       	or	r24, r25
 68a:	39 f0       	breq	.+14     	; 0x69a <Set_Pin_Data+0x90>
 68c:	08 95       	ret
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	91 05       	cpc	r25, r1
 692:	d9 f0       	breq	.+54     	; 0x6ca <Set_Pin_Data+0xc0>
 694:	03 97       	sbiw	r24, 0x03	; 3
 696:	29 f1       	breq	.+74     	; 0x6e2 <Set_Pin_Data+0xd8>
 698:	08 95       	ret
            case _PA:
                PORTA &= ~(1 << pinNum);
 69a:	2b b3       	in	r18, 0x1b	; 27
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Set_Pin_Data+0x9c>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <Set_Pin_Data+0x98>
 6aa:	80 95       	com	r24
 6ac:	82 23       	and	r24, r18
 6ae:	8b bb       	out	0x1b, r24	; 27
                break;
 6b0:	08 95       	ret
            case _PB:
                PORTB &= ~(1 << pinNum);
 6b2:	28 b3       	in	r18, 0x18	; 24
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <Set_Pin_Data+0xb4>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <Set_Pin_Data+0xb0>
 6c2:	80 95       	com	r24
 6c4:	82 23       	and	r24, r18
 6c6:	88 bb       	out	0x18, r24	; 24
                break;
 6c8:	08 95       	ret
            case _PC:
                PORTC &= ~(1 << pinNum);
 6ca:	25 b3       	in	r18, 0x15	; 21
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <Set_Pin_Data+0xcc>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <Set_Pin_Data+0xc8>
 6da:	80 95       	com	r24
 6dc:	82 23       	and	r24, r18
 6de:	85 bb       	out	0x15, r24	; 21
                break;
 6e0:	08 95       	ret
            case _PD:
                PORTD &= ~(1 << pinNum);
 6e2:	22 b3       	in	r18, 0x12	; 18
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <Set_Pin_Data+0xe4>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	6a 95       	dec	r22
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <Set_Pin_Data+0xe0>
 6f2:	80 95       	com	r24
 6f4:	82 23       	and	r24, r18
 6f6:	82 bb       	out	0x12, r24	; 18
 6f8:	08 95       	ret

000006fa <Good_Job>:
#include <avr/io.h>
#include "../NeededDIO/config.h"

void Good_Job(){
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	29 97       	sbiw	r28, 0x09	; 9
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
	char sentences[] = "Good Job";
 70e:	89 e0       	ldi	r24, 0x09	; 9
 710:	e0 e6       	ldi	r30, 0x60	; 96
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	de 01       	movw	r26, r28
 716:	11 96       	adiw	r26, 0x01	; 1
 718:	01 90       	ld	r0, Z+
 71a:	0d 92       	st	X+, r0
 71c:	8a 95       	dec	r24
 71e:	e1 f7       	brne	.-8      	; 0x718 <Good_Job+0x1e>
	LCD_XY(_ROW0, 1);
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
	LCD_String(sentences);
 72c:	ce 01       	movw	r24, r28
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 734:	2f ef       	ldi	r18, 0xFF	; 255
 736:	83 ed       	ldi	r24, 0xD3	; 211
 738:	90 e3       	ldi	r25, 0x30	; 48
 73a:	21 50       	subi	r18, 0x01	; 1
 73c:	80 40       	sbci	r24, 0x00	; 0
 73e:	90 40       	sbci	r25, 0x00	; 0
 740:	e1 f7       	brne	.-8      	; 0x73a <Good_Job+0x40>
 742:	00 c0       	rjmp	.+0      	; 0x744 <Good_Job+0x4a>
 744:	00 00       	nop
	_delay_ms(1000);
	LCD_Send_Command(0x01); //Clear LCD
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 74c:	8f e9       	ldi	r24, 0x9F	; 159
 74e:	9c e8       	ldi	r25, 0x8C	; 140
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <Good_Job+0x56>
 754:	00 c0       	rjmp	.+0      	; 0x756 <Good_Job+0x5c>
 756:	00 00       	nop
	_delay_ms(9);
}
 758:	29 96       	adiw	r28, 0x09	; 9
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	de bf       	out	0x3e, r29	; 62
 760:	0f be       	out	0x3f, r0	; 63
 762:	cd bf       	out	0x3d, r28	; 61
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <I_am_Watching>:

void I_am_Watching(){
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	2e 97       	sbiw	r28, 0x0e	; 14
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
   char sentences[] = "I am Watching";
 77e:	8e e0       	ldi	r24, 0x0E	; 14
 780:	e9 e6       	ldi	r30, 0x69	; 105
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	de 01       	movw	r26, r28
 786:	11 96       	adiw	r26, 0x01	; 1
 788:	01 90       	ld	r0, Z+
 78a:	0d 92       	st	X+, r0
 78c:	8a 95       	dec	r24
 78e:	e1 f7       	brne	.-8      	; 0x788 <I_am_Watching+0x1e>
            LCD_XY(_ROW0, 1);
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentences);
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 7a4:	2f ef       	ldi	r18, 0xFF	; 255
 7a6:	89 e6       	ldi	r24, 0x69	; 105
 7a8:	98 e1       	ldi	r25, 0x18	; 24
 7aa:	21 50       	subi	r18, 0x01	; 1
 7ac:	80 40       	sbci	r24, 0x00	; 0
 7ae:	90 40       	sbci	r25, 0x00	; 0
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <I_am_Watching+0x40>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <I_am_Watching+0x4a>
 7b4:	00 00       	nop
            _delay_ms(500);
			LCD_Send_Command(0x01); //Clear LCD
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 7bc:	8f ed       	ldi	r24, 0xDF	; 223
 7be:	9e e2       	ldi	r25, 0x2E	; 46
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <I_am_Watching+0x56>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <I_am_Watching+0x5c>
 7c6:	00 00       	nop
			_delay_ms(3); 		
}
 7c8:	2e 96       	adiw	r28, 0x0e	; 14
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <You>:

void You() {
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <You+0x6>
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <You+0x8>
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
	char sentences[] = "You";
 7e6:	89 e5       	ldi	r24, 0x59	; 89
 7e8:	9f e6       	ldi	r25, 0x6F	; 111
 7ea:	9a 83       	std	Y+2, r25	; 0x02
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	85 e7       	ldi	r24, 0x75	; 117
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	9c 83       	std	Y+4, r25	; 0x04
 7f4:	8b 83       	std	Y+3, r24	; 0x03
	LCD_XY(_ROW0, 5);
 7f6:	65 e0       	ldi	r22, 0x05	; 5
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
	LCD_String(sentences);
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 80a:	2f ef       	ldi	r18, 0xFF	; 255
 80c:	89 e6       	ldi	r24, 0x69	; 105
 80e:	98 e1       	ldi	r25, 0x18	; 24
 810:	21 50       	subi	r18, 0x01	; 1
 812:	80 40       	sbci	r24, 0x00	; 0
 814:	90 40       	sbci	r25, 0x00	; 0
 816:	e1 f7       	brne	.-8      	; 0x810 <You+0x36>
 818:	00 c0       	rjmp	.+0      	; 0x81a <You+0x40>
 81a:	00 00       	nop
	_delay_ms(500);
	LCD_Send_Command(0x01); //Clear LCD
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 822:	8f ed       	ldi	r24, 0xDF	; 223
 824:	9e e2       	ldi	r25, 0x2E	; 46
 826:	01 97       	sbiw	r24, 0x01	; 1
 828:	f1 f7       	brne	.-4      	; 0x826 <You+0x4c>
 82a:	00 c0       	rjmp	.+0      	; 0x82c <You+0x52>
 82c:	00 00       	nop
	_delay_ms(3);
}
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <Really_I_love_you>:
void Really_I_love_you(){
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	63 97       	sbiw	r28, 0x13	; 19
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
   char sentences[] = "Really ";
 850:	88 e0       	ldi	r24, 0x08	; 8
 852:	e7 e7       	ldi	r30, 0x77	; 119
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	de 01       	movw	r26, r28
 858:	11 96       	adiw	r26, 0x01	; 1
 85a:	01 90       	ld	r0, Z+
 85c:	0d 92       	st	X+, r0
 85e:	8a 95       	dec	r24
 860:	e1 f7       	brne	.-8      	; 0x85a <Really_I_love_you+0x1e>
            LCD_XY(_ROW0, 6);
 862:	66 e0       	ldi	r22, 0x06	; 6
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentences);
 86e:	ce 01       	movw	r24, r28
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
            char sentence1[] = "I love you";
 876:	8b e0       	ldi	r24, 0x0B	; 11
 878:	ef e7       	ldi	r30, 0x7F	; 127
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	de 01       	movw	r26, r28
 87e:	19 96       	adiw	r26, 0x09	; 9
 880:	01 90       	ld	r0, Z+
 882:	0d 92       	st	X+, r0
 884:	8a 95       	dec	r24
 886:	e1 f7       	brne	.-8      	; 0x880 <__stack+0x21>
            LCD_XY(_ROW1, 4);
 888:	64 e0       	ldi	r22, 0x04	; 4
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentence1);
 894:	ce 01       	movw	r24, r28
 896:	09 96       	adiw	r24, 0x09	; 9
 898:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 89c:	2f ef       	ldi	r18, 0xFF	; 255
 89e:	83 ed       	ldi	r24, 0xD3	; 211
 8a0:	90 e3       	ldi	r25, 0x30	; 48
 8a2:	21 50       	subi	r18, 0x01	; 1
 8a4:	80 40       	sbci	r24, 0x00	; 0
 8a6:	90 40       	sbci	r25, 0x00	; 0
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <__stack+0x4d>
 8ac:	00 00       	nop
            _delay_ms(1000); 
			LCD_Send_Command(0x01); //Clear LCD
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 8b4:	8f e3       	ldi	r24, 0x3F	; 63
 8b6:	9c e9       	ldi	r25, 0x9C	; 156
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
 8be:	00 00       	nop
			_delay_ms(10);
}
 8c0:	63 96       	adiw	r28, 0x13	; 19
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <I_love_you>:
void I_love_you(){
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	2b 97       	sbiw	r28, 0x0b	; 11
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
    char sentences[] = "I love you";
 8e6:	8b e0       	ldi	r24, 0x0B	; 11
 8e8:	ef e7       	ldi	r30, 0x7F	; 127
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	de 01       	movw	r26, r28
 8ee:	11 96       	adiw	r26, 0x01	; 1
 8f0:	01 90       	ld	r0, Z+
 8f2:	0d 92       	st	X+, r0
 8f4:	8a 95       	dec	r24
 8f6:	e1 f7       	brne	.-8      	; 0x8f0 <I_love_you+0x1e>
            LCD_XY(_ROW1, 1);
 8f8:	61 e0       	ldi	r22, 0x01	; 1
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentences);
 904:	ce 01       	movw	r24, r28
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 90c:	2f ef       	ldi	r18, 0xFF	; 255
 90e:	89 e6       	ldi	r24, 0x69	; 105
 910:	98 e1       	ldi	r25, 0x18	; 24
 912:	21 50       	subi	r18, 0x01	; 1
 914:	80 40       	sbci	r24, 0x00	; 0
 916:	90 40       	sbci	r25, 0x00	; 0
 918:	e1 f7       	brne	.-8      	; 0x912 <I_love_you+0x40>
 91a:	00 c0       	rjmp	.+0      	; 0x91c <I_love_you+0x4a>
 91c:	00 00       	nop
            _delay_ms(500);
			LCD_Send_Command(0x01); //Clear LCD
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 924:	8f ed       	ldi	r24, 0xDF	; 223
 926:	9e e2       	ldi	r25, 0x2E	; 46
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	f1 f7       	brne	.-4      	; 0x928 <I_love_you+0x56>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <I_love_you+0x5c>
 92e:	00 00       	nop
			_delay_ms(3);
}
 930:	2b 96       	adiw	r28, 0x0b	; 11
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	f8 94       	cli
 936:	de bf       	out	0x3e, r29	; 62
 938:	0f be       	out	0x3f, r0	; 63
 93a:	cd bf       	out	0x3d, r28	; 61
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <This_is_Awesome>:
void This_is_Awesome(){
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	60 97       	sbiw	r28, 0x10	; 16
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	f8 94       	cli
 950:	de bf       	out	0x3e, r29	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	cd bf       	out	0x3d, r28	; 61
    char sentences[] = "This is Awesome";
 956:	80 e1       	ldi	r24, 0x10	; 16
 958:	ea e8       	ldi	r30, 0x8A	; 138
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	de 01       	movw	r26, r28
 95e:	11 96       	adiw	r26, 0x01	; 1
 960:	01 90       	ld	r0, Z+
 962:	0d 92       	st	X+, r0
 964:	8a 95       	dec	r24
 966:	e1 f7       	brne	.-8      	; 0x960 <This_is_Awesome+0x1e>
            LCD_XY(_ROW0, 1);
 968:	61 e0       	ldi	r22, 0x01	; 1
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentences);
 974:	ce 01       	movw	r24, r28
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 97c:	2f ef       	ldi	r18, 0xFF	; 255
 97e:	89 e6       	ldi	r24, 0x69	; 105
 980:	98 e1       	ldi	r25, 0x18	; 24
 982:	21 50       	subi	r18, 0x01	; 1
 984:	80 40       	sbci	r24, 0x00	; 0
 986:	90 40       	sbci	r25, 0x00	; 0
 988:	e1 f7       	brne	.-8      	; 0x982 <This_is_Awesome+0x40>
 98a:	00 c0       	rjmp	.+0      	; 0x98c <This_is_Awesome+0x4a>
 98c:	00 00       	nop
            _delay_ms(500);
			LCD_Send_Command(0x01); //Clear LCD
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 994:	8f ed       	ldi	r24, 0xDF	; 223
 996:	9e e2       	ldi	r25, 0x2E	; 46
 998:	01 97       	sbiw	r24, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <This_is_Awesome+0x56>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <This_is_Awesome+0x5c>
 99e:	00 00       	nop
			_delay_ms(3);
}
 9a0:	60 96       	adiw	r28, 0x10	; 16
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret

000009b2 <I_hope_you_a_happy_life>:
void I_hope_you_a_happy_life(){
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62
 9ba:	68 97       	sbiw	r28, 0x18	; 24
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	f8 94       	cli
 9c0:	de bf       	out	0x3e, r29	; 62
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	cd bf       	out	0x3d, r28	; 61
     char sentences[] = "I hope you";
 9c6:	8b e0       	ldi	r24, 0x0B	; 11
 9c8:	ea e9       	ldi	r30, 0x9A	; 154
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	de 01       	movw	r26, r28
 9ce:	11 96       	adiw	r26, 0x01	; 1
 9d0:	01 90       	ld	r0, Z+
 9d2:	0d 92       	st	X+, r0
 9d4:	8a 95       	dec	r24
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <I_hope_you_a_happy_life+0x1e>
            LCD_XY(_ROW0, 3);
 9d8:	63 e0       	ldi	r22, 0x03	; 3
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentences);
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
            char sentences1[] = "a happy life";
 9ec:	8d e0       	ldi	r24, 0x0D	; 13
 9ee:	e5 ea       	ldi	r30, 0xA5	; 165
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	de 01       	movw	r26, r28
 9f4:	1c 96       	adiw	r26, 0x0c	; 12
 9f6:	01 90       	ld	r0, Z+
 9f8:	0d 92       	st	X+, r0
 9fa:	8a 95       	dec	r24
 9fc:	e1 f7       	brne	.-8      	; 0x9f6 <I_hope_you_a_happy_life+0x44>
            LCD_XY(_ROW1, 2);
 9fe:	62 e0       	ldi	r22, 0x02	; 2
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_XY>
            LCD_String(sentences1);
 a0a:	ce 01       	movw	r24, r28
 a0c:	0c 96       	adiw	r24, 0x0c	; 12
 a0e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_String>
 a12:	2f ef       	ldi	r18, 0xFF	; 255
 a14:	89 e6       	ldi	r24, 0x69	; 105
 a16:	98 e1       	ldi	r25, 0x18	; 24
 a18:	21 50       	subi	r18, 0x01	; 1
 a1a:	80 40       	sbci	r24, 0x00	; 0
 a1c:	90 40       	sbci	r25, 0x00	; 0
 a1e:	e1 f7       	brne	.-8      	; 0xa18 <I_hope_you_a_happy_life+0x66>
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <I_hope_you_a_happy_life+0x70>
 a22:	00 00       	nop
            _delay_ms(500);
			LCD_Send_Command(0x01); //Clear LCD
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Command>
 a2a:	8f eb       	ldi	r24, 0xBF	; 191
 a2c:	9d e5       	ldi	r25, 0x5D	; 93
 a2e:	01 97       	sbiw	r24, 0x01	; 1
 a30:	f1 f7       	brne	.-4      	; 0xa2e <I_hope_you_a_happy_life+0x7c>
 a32:	00 c0       	rjmp	.+0      	; 0xa34 <I_hope_you_a_happy_life+0x82>
 a34:	00 00       	nop
			_delay_ms(6);
}
 a36:	68 96       	adiw	r28, 0x18	; 24
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
